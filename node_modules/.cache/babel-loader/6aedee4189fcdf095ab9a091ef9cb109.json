{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst settle = require(\"axios/lib/core/settle\");\n\nconst defaults = require(\"axios/lib/defaults\");\n\nconst transformData = require(\"axios/lib/core/transformData\");\n\nconst common_1 = require(\"./common\");\n\nfunction statusToCode(status) {\n  switch (status) {\n    case common_1.Status.OK:\n    case common_1.Status.ZERO_RESULTS:\n      {\n        return 200;\n      }\n\n    case common_1.Status.INVALID_REQUEST:\n    case common_1.Status.MAX_ROUTE_LENGTH_EXCEEDED:\n    case common_1.Status.MAX_WAYPOINTS_EXCEEDED:\n      {\n        return 400;\n      }\n\n    case common_1.Status.REQUEST_DENIED:\n      {\n        return 403;\n      }\n\n    case common_1.Status.NOT_FOUND:\n      {\n        return 404;\n      }\n\n    case common_1.Status.OVER_DAILY_LIMIT:\n    case common_1.Status.OVER_QUERY_LIMIT:\n      {\n        return 429;\n      }\n\n    case common_1.Status.UNKNOWN_ERROR:\n      {\n        return 500;\n      }\n\n    default:\n      {\n        return 200;\n      }\n  }\n}\n\nexports.statusToCode = statusToCode;\n\nexports.customAdapter = config => new Promise((resolve, reject) => {\n  defaults.adapter(config).then(r => {\n    // unfortunately data is transformed after the adapter\n    r.data = transformData(r.data, r.headers, config.transformResponse);\n\n    if (r.status === 200 && r.data.status) {\n      r.status = statusToCode(r.data.status);\n    }\n\n    settle(resolve, reject, r);\n  }).catch(reject);\n});","map":{"version":3,"sources":["../src/adapter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA,MAAA,MAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAGA,SAAgB,YAAhB,CAA6B,MAA7B,EAA2C;AACzC,UAAQ,MAAR;AACE,SAAK,QAAA,CAAA,MAAA,CAAO,EAAZ;AACA,SAAK,QAAA,CAAA,MAAA,CAAO,YAAZ;AAA0B;AACxB,eAAO,GAAP;AACD;;AACD,SAAK,QAAA,CAAA,MAAA,CAAO,eAAZ;AACA,SAAK,QAAA,CAAA,MAAA,CAAO,yBAAZ;AACA,SAAK,QAAA,CAAA,MAAA,CAAO,sBAAZ;AAAoC;AAClC,eAAO,GAAP;AACD;;AACD,SAAK,QAAA,CAAA,MAAA,CAAO,cAAZ;AAA4B;AAC1B,eAAO,GAAP;AACD;;AACD,SAAK,QAAA,CAAA,MAAA,CAAO,SAAZ;AAAuB;AACrB,eAAO,GAAP;AACD;;AACD,SAAK,QAAA,CAAA,MAAA,CAAO,gBAAZ;AACA,SAAK,QAAA,CAAA,MAAA,CAAO,gBAAZ;AAA8B;AAC5B,eAAO,GAAP;AACD;;AACD,SAAK,QAAA,CAAA,MAAA,CAAO,aAAZ;AAA2B;AACzB,eAAO,GAAP;AACD;;AACD;AAAS;AACP,eAAO,GAAP;AACD;AAzBH;AA2BD;;AA5BD,OAAA,CAAA,YAAA,GAAA,YAAA;;AA8Ba,OAAA,CAAA,aAAA,GAAiB,MAAD,IAC3B,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AAC9B,EAAA,QAAQ,CACL,OADH,CACW,MADX,EAEG,IAFH,CAES,CAAD,IAAqB;AACzB;AACA,IAAA,CAAC,CAAC,IAAF,GAAS,aAAa,CAAC,CAAC,CAAC,IAAH,EAAS,CAAC,CAAC,OAAX,EAAoB,MAAM,CAAC,iBAA3B,CAAtB;;AACA,QAAI,CAAC,CAAC,MAAF,KAAa,GAAb,IAAoB,CAAC,CAAC,IAAF,CAAO,MAA/B,EAAuC;AACrC,MAAA,CAAC,CAAC,MAAF,GAAW,YAAY,CAAC,CAAC,CAAC,IAAF,CAAO,MAAR,CAAvB;AACD;;AACD,IAAA,MAAM,CAAC,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAAN;AACD,GATH,EAUG,KAVH,CAUS,MAVT;AAWD,CAZD,CADW","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst settle = require(\"axios/lib/core/settle\");\nconst defaults = require(\"axios/lib/defaults\");\nconst transformData = require(\"axios/lib/core/transformData\");\nconst common_1 = require(\"./common\");\nfunction statusToCode(status) {\n    switch (status) {\n        case common_1.Status.OK:\n        case common_1.Status.ZERO_RESULTS: {\n            return 200;\n        }\n        case common_1.Status.INVALID_REQUEST:\n        case common_1.Status.MAX_ROUTE_LENGTH_EXCEEDED:\n        case common_1.Status.MAX_WAYPOINTS_EXCEEDED: {\n            return 400;\n        }\n        case common_1.Status.REQUEST_DENIED: {\n            return 403;\n        }\n        case common_1.Status.NOT_FOUND: {\n            return 404;\n        }\n        case common_1.Status.OVER_DAILY_LIMIT:\n        case common_1.Status.OVER_QUERY_LIMIT: {\n            return 429;\n        }\n        case common_1.Status.UNKNOWN_ERROR: {\n            return 500;\n        }\n        default: {\n            return 200;\n        }\n    }\n}\nexports.statusToCode = statusToCode;\nexports.customAdapter = (config) => new Promise((resolve, reject) => {\n    defaults\n        .adapter(config)\n        .then((r) => {\n        // unfortunately data is transformed after the adapter\n        r.data = transformData(r.data, r.headers, config.transformResponse);\n        if (r.status === 200 && r.data.status) {\n            r.status = statusToCode(r.data.status);\n        }\n        settle(resolve, reject, r);\n    })\n        .catch(reject);\n});\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"script"}