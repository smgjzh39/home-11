{"ast":null,"code":"var _jsxFileName = \"/Users/chengsong/Documents/GitHub/house-search-helper/src/components/Pagination.js\";\nimport React, { Fragment, Component } from 'react';\nexport default class Pagination extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onPageLengthChange = e => {\n      this.props.onPageLengthChange(this.pageLengthInput.value);\n    };\n\n    this.onPrevPage = e => {\n      if (this.state.currentPage === 1) return;\n      this.onGotoPage(this.state.currentPage - 1);\n    };\n\n    this.onNextPage = e => {\n      if (this.state.currentPage > this.pages - 1) return;\n      this.onGotoPage(this.state.currentPage + 1);\n    };\n\n    this.onGotoPage = pageNo => {\n      if (pageNo === this.state.currentPage) {\n        return;\n      }\n\n      if (this.currentPageInput) {\n        this.currentPageInput.value = pageNo;\n      }\n\n      this.setState({\n        currentPage: pageNo\n      });\n      this.props.onGotoPage(pageNo);\n    };\n\n    this._getPaginationButtons = text => {\n      let classNames = 'pagination-btn'; // May need refactor\n\n      if (this.state.currentPage === text) {\n        classNames += ' current-page';\n      }\n\n      let html = /*#__PURE__*/React.createElement(\"button\", {\n        key: `btn-${text}`,\n        id: `btn-${text}`,\n        className: classNames,\n        onClick: e => {\n          this.onGotoPage(text);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }\n      }, text);\n      return html;\n    };\n\n    this.onCurrentPageChange = e => {\n      if (this.currentPageInput.value >= this.pages) {\n        this.currentPageInput.value = this.pages;\n      }\n\n      this.setState({\n        currentPage: this.currentPageInput.value\n      });\n      this.props.onGotoPage(this.currentPageInput.value);\n    };\n\n    this.state = {\n      currentPage: props.currentPage || 1\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.currentPage !== prevState.currentPage) {\n      return {\n        currentPage: nextProps.currentPage\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let totalRecords = this.props.totalRecords;\n    let pages = Math.ceil(totalRecords / this.props.pageLength);\n    this.pages = pages;\n    let pageSelector = /*#__PURE__*/React.createElement(Fragment, {\n      key: \"f-page-selector\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      key: \"page-selector\",\n      className: \"page-selector\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, \"Rows per page:\", /*#__PURE__*/React.createElement(\"input\", {\n      key: \"page-input\",\n      type: \"number\",\n      min: \"1\",\n      ref: input => this.pageLengthInput = input,\n      defaultValue: this.props.pageLength || 5,\n      onChange: this.onPageLengthChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    })));\n    let prevButton = /*#__PURE__*/React.createElement(\"button\", {\n      key: \"prev\",\n      className: \"pagination-btn prev\",\n      onClick: this.onPrevPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, \"<\");\n    let nextButton = /*#__PURE__*/React.createElement(\"button\", {\n      key: \"next\",\n      className: \"pagination-btn next\",\n      onClick: this.onNextPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, \">\");\n    let buttons = [];\n\n    if (this.props.type === \"long\") {\n      for (let i = 1; i <= pages; i++) {\n        buttons.push(this._getPaginationButtons(i));\n      }\n    } else if (this.props.type === \"short\") {\n      buttons.push( /*#__PURE__*/React.createElement(\"input\", {\n        key: \"currentPageInput\",\n        className: \"current-page-input\",\n        type: \"number\",\n        max: this.pages,\n        defaultValue: this.state.currentPage,\n        ref: input => {\n          this.currentPageInput = input;\n        },\n        onChange: this.onCurrentPageChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pagination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, [pageSelector, prevButton, buttons, nextButton]);\n  }\n\n}","map":{"version":3,"sources":["/Users/chengsong/Documents/GitHub/house-search-helper/src/components/Pagination.js"],"names":["React","Fragment","Component","Pagination","constructor","props","onPageLengthChange","e","pageLengthInput","value","onPrevPage","state","currentPage","onGotoPage","onNextPage","pages","pageNo","currentPageInput","setState","_getPaginationButtons","text","classNames","html","onCurrentPageChange","getDerivedStateFromProps","nextProps","prevState","render","totalRecords","Math","ceil","pageLength","pageSelector","input","prevButton","nextButton","buttons","type","i","push"],"mappings":"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","sourcesContent":["import React, {Fragment, Component } from 'react';\n\nexport default class Pagination extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPage: props.currentPage || 1\n        }\n        \n    }\n\n    onPageLengthChange = (e) => {\n        this.props.onPageLengthChange(this.pageLengthInput.value);\n    }\n\n    onPrevPage = (e) => {\n        if (this.state.currentPage === 1) return;\n        this.onGotoPage(this.state.currentPage - 1);\n    }\n\n    onNextPage = (e) => {\n        if (this.state.currentPage > this.pages - 1) return;\n        this.onGotoPage(this.state.currentPage + 1);\n    }\n\n    onGotoPage = (pageNo) => {\n        if (pageNo === this.state.currentPage) {\n            return;\n        }\n        if (this.currentPageInput) {\n            this.currentPageInput.value = pageNo;\n        }\n\n        this.setState({\n            currentPage: pageNo\n        });\n\n        this.props.onGotoPage(pageNo);\n    }\n      \n    _getPaginationButtons = (text) => {\n        let classNames = 'pagination-btn';\n        \n        // May need refactor\n        if (this.state.currentPage === text) {\n            classNames += ' current-page';\n        }\n\n        let html = (\n            <button key={`btn-${text}`}\n                id={`btn-${text}`}\n                className={classNames}\n                onClick={(e)=>{this.onGotoPage(text)}}\n            >{text}\n            </button>\n        );\n        return html;\n    }\n\n    onCurrentPageChange = (e) => {\n        if (this.currentPageInput.value >= this.pages) {\n            this.currentPageInput.value = this.pages;\n        }\n        this.setState({\n            currentPage: this.currentPageInput.value\n        });\n\n        this.props.onGotoPage(this.currentPageInput.value);\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.currentPage !== prevState.currentPage) {\n            return {\n               currentPage: nextProps.currentPage \n            }\n        }\n        return null;\n    }\n\n    render() {\n        let totalRecords = this.props.totalRecords;\n        let pages = Math.ceil(totalRecords / this.props.pageLength);\n        this.pages = pages;\n\n        let pageSelector = (\n            <Fragment key=\"f-page-selector\">\n                <span key=\"page-selector\" className=\"page-selector\">\n                    Rows per page:\n                    <input key=\"page-input\"\n                      type=\"number\"\n                      min=\"1\"\n                      ref={(input)=>this.pageLengthInput = input}\n                      defaultValue={this.props.pageLength || 5}\n                      onChange={this.onPageLengthChange}\n                    />\n                </span>\n            </Fragment>\n        );\n\n        let prevButton = (\n            <button key=\"prev\"\n                className=\"pagination-btn prev\"\n                onClick={this.onPrevPage}>\n                {\"<\"}\n            </button>\n\n        );\n\n        let nextButton = (\n            <button key=\"next\"\n                className=\"pagination-btn next\"\n                onClick={this.onNextPage}>\n                {\">\"}\n            </button>\n\n        );\n\n        let buttons = [];\n        if (this.props.type === \"long\") {\n            for(let i = 1; i <= pages; i++) {\n                buttons.push(this._getPaginationButtons(i));\n            }\n        } else if (this.props.type === \"short\") {\n            buttons.push(\n                <input key=\"currentPageInput\"\n                    className=\"current-page-input\"\n                    type=\"number\"\n                    max={this.pages}\n                    defaultValue={this.state.currentPage}\n                    ref={(input)=>{this.currentPageInput=input}}\n                    onChange={this.onCurrentPageChange} />\n            );\n        }\n\n        return (\n            <div className=\"pagination\">\n            {\n                [pageSelector, prevButton, buttons, nextButton]\n            }\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}