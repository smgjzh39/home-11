{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Polyline encodes an array of LatLng objects.\n *\n * See {@link https://developers.google.com/maps/documentation/utilities/polylinealgorithm}\n *\n */\n\nfunction encodePath(path) {\n  var result = [];\n  var start = [0, 0];\n  var end;\n\n  var encodePart = function (part) {\n    part = part < 0 ? ~(part << 1) : part << 1;\n\n    while (part >= 0x20) {\n      result.push(String.fromCharCode((0x20 | part & 0x1f) + 63));\n      part >>= 5;\n    }\n\n    result.push(String.fromCharCode(part + 63));\n  };\n\n  for (let i = 0, I = path.length || 0; i < I; ++i) {\n    end = [Math.round(path[i].lat * 1e5), Math.round(path[i].lng * 1e5)];\n    encodePart(end[0] - start[0]); // lat\n\n    encodePart(end[1] - start[1]); // lng\n\n    start = end;\n  }\n\n  return result.join(\"\");\n}\n\nexports.encodePath = encodePath;\n/**\n * Decodes a polyline encoded string.\n *\n * See {@link https://developers.google.com/maps/documentation/utilities/polylinealgorithm}\n */\n\nfunction decodePath(encodedPath) {\n  let len = encodedPath.length || 0;\n  let path = new Array(Math.floor(encodedPath.length / 2));\n  let index = 0;\n  let lat = 0;\n  let lng = 0;\n  let pointIndex;\n\n  for (pointIndex = 0; index < len; ++pointIndex) {\n    let result = 1;\n    let shift = 0;\n    let b;\n\n    do {\n      b = encodedPath.charCodeAt(index++) - 63 - 1;\n      result += b << shift;\n      shift += 5;\n    } while (b >= 0x1f);\n\n    lat += result & 1 ? ~(result >> 1) : result >> 1;\n    result = 1;\n    shift = 0;\n\n    do {\n      b = encodedPath.charCodeAt(index++) - 63 - 1;\n      result += b << shift;\n      shift += 5;\n    } while (b >= 0x1f);\n\n    lng += result & 1 ? ~(result >> 1) : result >> 1;\n    path[pointIndex] = {\n      lat: lat * 1e-5,\n      lng: lng * 1e-5\n    };\n  }\n\n  path.length = pointIndex;\n  return path;\n}\n\nexports.decodePath = decodePath;","map":{"version":3,"sources":["../src/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Polyline encodes an array of LatLng objects.\n *\n * See {@link https://developers.google.com/maps/documentation/utilities/polylinealgorithm}\n *\n */\nfunction encodePath(path) {\n    var result = [];\n    var start = [0, 0];\n    var end;\n    var encodePart = function (part) {\n        part = part < 0 ? ~(part << 1) : part << 1;\n        while (part >= 0x20) {\n            result.push(String.fromCharCode((0x20 | (part & 0x1f)) + 63));\n            part >>= 5;\n        }\n        result.push(String.fromCharCode(part + 63));\n    };\n    for (let i = 0, I = path.length || 0; i < I; ++i) {\n        end = [Math.round(path[i].lat * 1e5), Math.round(path[i].lng * 1e5)];\n        encodePart(end[0] - start[0]); // lat\n        encodePart(end[1] - start[1]); // lng\n        start = end;\n    }\n    return result.join(\"\");\n}\nexports.encodePath = encodePath;\n/**\n * Decodes a polyline encoded string.\n *\n * See {@link https://developers.google.com/maps/documentation/utilities/polylinealgorithm}\n */\nfunction decodePath(encodedPath) {\n    let len = encodedPath.length || 0;\n    let path = new Array(Math.floor(encodedPath.length / 2));\n    let index = 0;\n    let lat = 0;\n    let lng = 0;\n    let pointIndex;\n    for (pointIndex = 0; index < len; ++pointIndex) {\n        let result = 1;\n        let shift = 0;\n        let b;\n        do {\n            b = encodedPath.charCodeAt(index++) - 63 - 1;\n            result += b << shift;\n            shift += 5;\n        } while (b >= 0x1f);\n        lat += result & 1 ? ~(result >> 1) : result >> 1;\n        result = 1;\n        shift = 0;\n        do {\n            b = encodedPath.charCodeAt(index++) - 63 - 1;\n            result += b << shift;\n            shift += 5;\n        } while (b >= 0x1f);\n        lng += result & 1 ? ~(result >> 1) : result >> 1;\n        path[pointIndex] = { lat: lat * 1e-5, lng: lng * 1e-5 };\n    }\n    path.length = pointIndex;\n    return path;\n}\nexports.decodePath = decodePath;\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"script"}