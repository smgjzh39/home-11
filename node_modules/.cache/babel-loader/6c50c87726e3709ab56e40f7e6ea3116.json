{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst serialize_1 = require(\"../serialize\");\n\nconst client_1 = require(\"../client\");\n/**\n * If both `result_type` and `location_type` filters are present then the API returns only those results that match both the\n * `result_type` and the `location_type` values. If none of the filter values are acceptable, the API returns `ZERO_RESULTS`.\n */\n\n\nvar ReverseGeocodingLocationType;\n\n(function (ReverseGeocodingLocationType) {\n  /** returns only the addresses for which Google has location information accurate down to street address precision. */\n  ReverseGeocodingLocationType[\"ROOFTOP\"] = \"ROOFTOP\";\n  /**\n   * returns only the addresses that reflect an approximation (usually on a road) interpolated between two precise points\n   * (such as intersections). An interpolated range generally indicates that rooftop geocodes are unavailable for a street address.\n   */\n\n  ReverseGeocodingLocationType[\"RANGE_INTERPOLATED\"] = \"RANGE_INTERPOLATED\";\n  /** returns only geometric centers of a location such as a polyline (for example, a street) or polygon (region). */\n\n  ReverseGeocodingLocationType[\"GEOMETRIC_CENTER\"] = \"GEOMETRIC_CENTER\";\n  /** returns only the addresses that are characterized as approximate. */\n\n  ReverseGeocodingLocationType[\"APPROXIMATE\"] = \"APPROXIMATE\";\n})(ReverseGeocodingLocationType = exports.ReverseGeocodingLocationType || (exports.ReverseGeocodingLocationType = {}));\n\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/geocode/json\";\nexports.defaultParamsSerializer = serialize_1.serializer({\n  latlng: serialize_1.latLngToString\n});\n\nfunction reverseGeocode(_a, axiosInstance = client_1.defaultAxiosInstance) {\n  var {\n    params,\n    method = \"get\",\n    url = exports.defaultUrl,\n    paramsSerializer = exports.defaultParamsSerializer\n  } = _a,\n      config = __rest(_a, [\"params\", \"method\", \"url\", \"paramsSerializer\"]);\n\n  return axiosInstance(Object.assign({\n    params,\n    method,\n    url,\n    paramsSerializer\n  }, config));\n}\n\nexports.reverseGeocode = reverseGeocode;","map":{"version":3,"sources":["../../src/geocode/reversegeocode.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;;;;;AAIA,IAAY,4BAAZ;;AAAA,CAAA,UAAY,4BAAZ,EAAwC;AACtC;AACA,EAAA,4BAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA;;;;;AAIA,EAAA,4BAAA,CAAA,oBAAA,CAAA,GAAA,oBAAA;AACA;;AACA,EAAA,4BAAA,CAAA,kBAAA,CAAA,GAAA,kBAAA;AACA;;AACA,EAAA,4BAAA,CAAA,aAAA,CAAA,GAAA,aAAA;AACD,CAZD,EAAY,4BAA4B,GAA5B,OAAA,CAAA,4BAAA,KAAA,OAAA,CAAA,4BAAA,GAA4B,EAA5B,CAAZ;;AAwEa,OAAA,CAAA,UAAA,GAAa,mDAAb;AAEA,OAAA,CAAA,uBAAA,GAA0B,WAAA,CAAA,UAAA,CAAW;AAChD,EAAA,MAAM,EAAE,WAAA,CAAA;AADwC,CAAX,CAA1B;;AAIb,SAAgB,cAAhB,CACE,EADF,EAQE,aAAA,GAA+B,QAAA,CAAA,oBARjC,EAQqD;MAPnD;AACE,IAAA,MADF;AAEE,IAAA,MAAM,GAAG,KAFX;AAGE,IAAA,GAAG,GAAG,OAAA,CAAA,UAHR;AAIE,IAAA,gBAAgB,GAAG,OAAA,CAAA;AAJrB,MAI4C,E;MAC1C,MAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,QAAA,EAAA,QAAA,EAAA,KAAA,EAAA,kBAAA,CAAA,C;;AAIF,SAAO,aAAa,CAAA,MAAA,CAAA,MAAA,CAAA;AAClB,IAAA,MADkB;AAElB,IAAA,MAFkB;AAGlB,IAAA,GAHkB;AAIlB,IAAA;AAJkB,GAAA,EAKf,MALe,CAAA,CAApB;AAOD;;AAjBD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst serialize_1 = require(\"../serialize\");\nconst client_1 = require(\"../client\");\n/**\n * If both `result_type` and `location_type` filters are present then the API returns only those results that match both the\n * `result_type` and the `location_type` values. If none of the filter values are acceptable, the API returns `ZERO_RESULTS`.\n */\nvar ReverseGeocodingLocationType;\n(function (ReverseGeocodingLocationType) {\n    /** returns only the addresses for which Google has location information accurate down to street address precision. */\n    ReverseGeocodingLocationType[\"ROOFTOP\"] = \"ROOFTOP\";\n    /**\n     * returns only the addresses that reflect an approximation (usually on a road) interpolated between two precise points\n     * (such as intersections). An interpolated range generally indicates that rooftop geocodes are unavailable for a street address.\n     */\n    ReverseGeocodingLocationType[\"RANGE_INTERPOLATED\"] = \"RANGE_INTERPOLATED\";\n    /** returns only geometric centers of a location such as a polyline (for example, a street) or polygon (region). */\n    ReverseGeocodingLocationType[\"GEOMETRIC_CENTER\"] = \"GEOMETRIC_CENTER\";\n    /** returns only the addresses that are characterized as approximate. */\n    ReverseGeocodingLocationType[\"APPROXIMATE\"] = \"APPROXIMATE\";\n})(ReverseGeocodingLocationType = exports.ReverseGeocodingLocationType || (exports.ReverseGeocodingLocationType = {}));\nexports.defaultUrl = \"https://maps.googleapis.com/maps/api/geocode/json\";\nexports.defaultParamsSerializer = serialize_1.serializer({\n    latlng: serialize_1.latLngToString\n});\nfunction reverseGeocode(_a, axiosInstance = client_1.defaultAxiosInstance) {\n    var { params, method = \"get\", url = exports.defaultUrl, paramsSerializer = exports.defaultParamsSerializer } = _a, config = __rest(_a, [\"params\", \"method\", \"url\", \"paramsSerializer\"]);\n    return axiosInstance(Object.assign({ params,\n        method,\n        url,\n        paramsSerializer }, config));\n}\nexports.reverseGeocode = reverseGeocode;\n//# sourceMappingURL=reversegeocode.js.map"]},"metadata":{},"sourceType":"script"}