{"ast":null,"code":"var _jsxFileName = \"/Users/chengsong/Documents/GitHub/house-search-helper/src/pages/datatable.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pagination from '../components/Pagination';\nexport default class DataTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this._preSearchData = null;\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDragStart = (e, source) => {\n      e.dataTransfer.setData('text/plain', source);\n    };\n\n    this.onDrop = (e, target) => {\n      e.preventDefault();\n      let source = e.dataTransfer.getData('text/plain');\n      let headers = [...this.state.headers];\n      let srcHeader = headers[source];\n      let targetHeader = headers[target];\n      let temp = srcHeader.index;\n      srcHeader.index = targetHeader.index;\n      targetHeader.index = temp;\n      this.setState({\n        headers\n      });\n    };\n\n    this.renderTableHeader = () => {\n      let {\n        headers\n      } = this.state;\n      headers.sort((a, b) => {\n        if (a.index > b.index) return 1;\n        return -1;\n      });\n      let headerView = headers.map((header, index) => {\n        let title = header.title;\n        let cleanTitle = header.accessor;\n        let width = header.width;\n\n        if (this.state.sortby === index) {\n          title += this.state.descending ? '\\u2193' : '\\u2191';\n        }\n\n        return /*#__PURE__*/React.createElement(\"th\", {\n          key: cleanTitle,\n          ref: th => this[cleanTitle] = th,\n          style: {\n            width: width\n          },\n          \"data-col\": cleanTitle,\n          onDragStart: e => this.onDragStart(e, index),\n          onDragOver: this.onDragOver,\n          onDrop: e => {\n            this.onDrop(e, index);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          draggable: true,\n          \"data-col\": cleanTitle,\n          className: \"header-cell\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }\n        }, title));\n      });\n      return headerView;\n    };\n\n    this.renderNoData = () => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        colSpan: this.props.headers.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, this.noData));\n    };\n\n    this.onUpdate = e => {\n      e.preventDefault();\n      let input = e.target.firstChild;\n      let header = this.state.headers[this.state.edit.cell];\n      let rowId = this.state.edit.rowId;\n      this.setState({\n        edit: null\n      });\n      this.props.onUpdate && this.props.onUpdate(header.accessor, rowId, input.value);\n    };\n\n    this.onFormReset = e => {\n      if (e.keyCode === 27) {\n        // ESC key\n        this.setState({\n          edit: null\n        });\n      }\n    };\n\n    this.renderContent = () => {\n      let {\n        headers\n      } = this.state;\n      let data = this.pagination ? this.state.pagedData : this.state.data;\n      let contentView = data.map((row, rowIdx) => {\n        let id = row[this.keyField];\n        let edit = this.state.edit;\n        let tds = headers.map((header, index) => {\n          let content = row[header.accessor];\n          let cell = header.cell;\n\n          if (cell) {\n            if (typeof cell === \"object\") {\n              if (cell.type === \"image\" && content) {\n                content = /*#__PURE__*/React.createElement(\"img\", {\n                  style: cell.style,\n                  src: content,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 39\n                  }\n                });\n              }\n            } else if (typeof cell === \"function\") {\n              content = cell(row);\n            }\n          }\n\n          if (this.props.edit) {\n            if (header.dataType && (header.dataType === \"number\" || header.dataType === \"string\") && header.accessor !== this.keyField) {\n              if (edit && edit.row === rowIdx && edit.cell === index) {\n                content = /*#__PURE__*/React.createElement(\"form\", {\n                  onSubmit: this.onUpdate,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(\"input\", {\n                  type: \"text\",\n                  defaultValue: content,\n                  onKeyUp: this.onFormReset,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 37\n                  }\n                }));\n              }\n            }\n          }\n\n          return /*#__PURE__*/React.createElement(\"td\", {\n            key: index,\n            \"data-id\": id,\n            \"data-row\": rowIdx,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 21\n            }\n          }, content);\n        });\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: rowIdx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }\n        }, tds);\n      });\n      return contentView;\n    };\n\n    this.onSort = e => {\n      let data = this.state.data.slice(); // Give new array\n\n      let colIndex = ReactDOM.findDOMNode(e.target).parentNode.cellIndex;\n      let colTitle = e.target.dataset.col;\n      let descending = !this.state.descending;\n      data.sort((a, b) => {\n        let sortVal = 0;\n\n        if (a[colTitle] < b[colTitle]) {\n          sortVal = -1;\n        } else if (a[colTitle] > b[colTitle]) {\n          sortVal = 1;\n        }\n\n        if (descending) {\n          sortVal = sortVal * -1;\n        }\n\n        return sortVal;\n      });\n      this.setState({\n        data,\n        sortby: colIndex,\n        descending\n      }, () => {\n        this.onGotoPage(this.state.currentPage);\n      });\n    };\n\n    this.onSearch = e => {\n      let {\n        headers\n      } = this.state; // Grab the index of the target column\n\n      let idx = e.target.dataset.idx; // Get the target column\n\n      let targetCol = this.state.headers[idx].accessor;\n      let data = this._preSearchData; // Filter the records\n\n      let searchData = this._preSearchData.filter(row => {\n        let show = true;\n\n        for (let i = 0; i < headers.length; i++) {\n          let fieldName = headers[i].accessor;\n          let fieldValue = row[fieldName];\n          let inputId = 'inp' + fieldName;\n          let input = this[inputId];\n\n          if (!fieldValue === '') {\n            show = true;\n          } else {\n            show = fieldValue.toString().toLowerCase().indexOf(input.value.toLowerCase()) > -1;\n            if (!show) break;\n          }\n        }\n\n        return show; //return row[targetCol].toString().toLowerCase().indexOf(needle) > -1;\n      }); // UPdate the state\n\n\n      this.setState({\n        data: searchData,\n        pagedData: searchData,\n        totalRecords: searchData.length\n      }, () => {\n        if (this.pagination.enabled) {\n          this.onGotoPage(1);\n        }\n      });\n    };\n\n    this.renderSearch = () => {\n      let {\n        search,\n        headers\n      } = this.state;\n\n      if (!search) {\n        return null;\n      }\n\n      let searchInputs = headers.map((header, idx) => {\n        // Get the header ref.\n        let hdr = this[header.accessor];\n        let inputId = 'inp' + header.accessor;\n        return /*#__PURE__*/React.createElement(\"td\", {\n          key: idx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          ref: input => this[inputId] = input,\n          style: {\n            width: hdr.clientWidth - 17 + \"px\"\n          },\n          \"data-idx\": idx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 21\n          }\n        }));\n      });\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        onChange: this.onSearch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }\n      }, searchInputs);\n    };\n\n    this.onShowEditor = e => {\n      let id = e.target.dataset.id;\n      this.setState({\n        edit: {\n          row: parseInt(e.target.dataset.row, 10),\n          rowId: id,\n          cell: e.target.cellIndex\n        }\n      });\n    };\n\n    this.renderTable = () => {\n      let title = this.props.title || \"DataTable\";\n      let headerView = this.renderTableHeader();\n      let contentView = this.state.data.length > 0 ? this.renderContent() : this.renderNoData();\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"data-inner-table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"caption\", {\n        className: \"data-table-caption\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 17\n        }\n      }, title), /*#__PURE__*/React.createElement(\"thead\", {\n        onClick: this.onSort,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 21\n        }\n      }, headerView)), /*#__PURE__*/React.createElement(\"tbody\", {\n        onDoubleClick: this.onShowEditor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 17\n        }\n      }, this.renderSearch(), contentView));\n    };\n\n    this.onToggleSearch = e => {\n      if (this.state.search) {\n        this.setState({\n          data: this._preSearchData,\n          search: false\n        });\n        this._preSearchData = null;\n      } else {\n        this._preSearchData = this.state.data;\n        this.setState({\n          search: true\n        });\n      }\n    };\n\n    this.renderToolbar = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"toolbar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.onToggleSearch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 17\n        }\n      }, \"Search\"));\n    };\n\n    this.getPagedData = (pageNo, pageLength) => {\n      let startOfRecord = (pageNo - 1) * pageLength;\n      let endOfRecord = startOfRecord + pageLength;\n      let data = this.state.data;\n      let pagedData = data.slice(startOfRecord, endOfRecord);\n      return pagedData;\n    };\n\n    this.onPageLengthChange = pageLength => {\n      this.setState({\n        pageLength: parseInt(pageLength, 10)\n      }, () => {\n        this.onGotoPage(this.state.currentPage);\n      });\n    };\n\n    this.onGotoPage = pageNo => {\n      let pagedData = this.getPagedData(pageNo, this.state.pageLength);\n      this.setState({\n        pagedData: pagedData,\n        currentPage: pageNo\n      });\n    };\n\n    this.state = {\n      headers: props.headers,\n      data: props.data,\n      pagedData: props.data,\n      sortby: null,\n      descending: null,\n      search: false,\n      pageLength: this.props.pagination.pageLength || 5,\n      currentPage: 1\n    };\n    this.keyField = props.keyField || \"id\"; // TODO: revisit this logic\n\n    this.noData = props.noData || \"No records found!\";\n    this.width = props.width || \"100%\"; // Add pagination support\n\n    this.pagination = this.props.pagination || {};\n  }\n\n  componentDidMount() {\n    if (this.pagination.enabled) {\n      this.onGotoPage(this.state.currentPage);\n    }\n  } //todo:\n\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.data.length != prevState.data.length) {\n      return {\n        headers: nextProps.headers,\n        data: nextProps.data,\n        sortby: prevState.sortby,\n        descending: prevState.descending,\n        search: prevState.search,\n        currentPage: 1,\n        pagedData: nextProps.data\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 13\n      }\n    }, this.pagination.enabled && /*#__PURE__*/React.createElement(Pagination, {\n      type: this.props.pagination.type,\n      totalRecords: this.state.data.length,\n      pageLength: this.state.pageLength,\n      onPageLengthChange: this.onPageLengthChange,\n      onGotoPage: this.onGotoPage,\n      currentPage: this.state.currentPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 21\n      }\n    }), this.renderToolbar(), this.renderTable());\n  }\n\n}","map":{"version":3,"sources":["/Users/chengsong/Documents/GitHub/house-search-helper/src/pages/datatable.js"],"names":["React","ReactDOM","Pagination","DataTable","Component","constructor","props","_preSearchData","onDragOver","e","preventDefault","onDragStart","source","dataTransfer","setData","onDrop","target","getData","headers","state","srcHeader","targetHeader","temp","index","setState","renderTableHeader","sort","a","b","headerView","map","header","title","cleanTitle","accessor","width","sortby","descending","th","renderNoData","length","noData","onUpdate","input","firstChild","edit","cell","rowId","value","onFormReset","keyCode","renderContent","data","pagination","pagedData","contentView","row","rowIdx","id","keyField","tds","content","type","style","dataType","onSort","slice","colIndex","findDOMNode","parentNode","cellIndex","colTitle","dataset","col","sortVal","onGotoPage","currentPage","onSearch","idx","targetCol","searchData","filter","show","i","fieldName","fieldValue","inputId","toString","toLowerCase","indexOf","totalRecords","enabled","renderSearch","search","searchInputs","hdr","clientWidth","onShowEditor","parseInt","renderTable","onToggleSearch","renderToolbar","getPagedData","pageNo","pageLength","startOfRecord","endOfRecord","onPageLengthChange","componentDidMount","getDerivedStateFromProps","nextProps","prevState","render","className"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pagination from '../components/Pagination';\n\nexport default class DataTable extends React.Component {\n    _preSearchData = null\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            headers: props.headers,\n            data: props.data,\n            pagedData: props.data,\n            sortby: null,\n            descending: null,\n            search: false,\n            pageLength: this.props.pagination.pageLength || 5,\n            currentPage: 1,\n        }\n\n        this.keyField = props.keyField || \"id\"; // TODO: revisit this logic\n        this.noData = props.noData || \"No records found!\";\n        this.width = props.width || \"100%\";\n\n        // Add pagination support\n        this.pagination = this.props.pagination || {};\n    }\n\n    onDragOver = (e) => {\n        e.preventDefault();\n    }\n\n    onDragStart = (e, source) => {\n        e.dataTransfer.setData('text/plain', source);\n    }\n\n    onDrop = (e, target) => {\n        e.preventDefault();\n        let source = e.dataTransfer.getData('text/plain');\n        let headers = [...this.state.headers];\n        let srcHeader = headers[source];\n        let targetHeader = headers[target];\n\n        let temp = srcHeader.index;\n        srcHeader.index = targetHeader.index;\n        targetHeader.index = temp;\n\n        this.setState({\n            headers\n        });\n    }\n\n    renderTableHeader = () => {\n        let { headers } = this.state;\n        headers.sort((a, b) => {\n            if (a.index > b.index) return 1;\n            return -1;\n        });\n\n        let headerView = headers.map((header, index) => {\n            let title = header.title;\n            let cleanTitle = header.accessor;\n            let width = header.width;\n\n            if (this.state.sortby === index) {\n                title += this.state.descending ? '\\u2193' : '\\u2191';\n            }\n\n            return (\n                <th key={cleanTitle}\n                    ref={(th) => this[cleanTitle] = th}\n                    style={{ width: width }}\n                    data-col={cleanTitle}\n                    onDragStart={(e) => this.onDragStart(e, index)}\n                    onDragOver={this.onDragOver}\n                    onDrop={(e) => { this.onDrop(e, index) }}>\n                    <span draggable data-col={cleanTitle} className=\"header-cell\">\n                        {title}\n                    </span>\n                </th>\n            );\n        });\n\n        return headerView;\n    }\n\n    renderNoData = () => {\n        return (\n            <tr>\n                <td colSpan={this.props.headers.length}>\n                    {this.noData}\n                </td>\n            </tr>\n        );\n    }\n\n    onUpdate = (e) => {\n        e.preventDefault();\n        let input = e.target.firstChild;\n        let header = this.state.headers[this.state.edit.cell];\n        let rowId = this.state.edit.rowId;\n\n        this.setState({\n            edit: null\n        });\n\n        this.props.onUpdate &&\n            this.props.onUpdate(header.accessor, rowId, input.value);\n    }\n\n    onFormReset = (e) => {\n        if (e.keyCode === 27) {  // ESC key\n            this.setState({\n                edit: null\n            });\n        }\n    }\n\n    renderContent = () => {\n        let { headers } = this.state;\n        let data = this.pagination ? this.state.pagedData\n            : this.state.data;\n\n        let contentView = data.map((row, rowIdx) => {\n            let id = row[this.keyField];\n            let edit = this.state.edit;\n\n            let tds = headers.map((header, index) => {\n                let content = row[header.accessor];\n                let cell = header.cell;\n                if (cell) {\n                    if (typeof (cell) === \"object\") {\n                        if (cell.type === \"image\" && content) {\n                            content = <img style={cell.style} src={content} />\n                        }\n                    } else if (typeof (cell) === \"function\") {\n                        content = cell(row);\n                    }\n                }\n\n                if (this.props.edit) {\n                    if (header.dataType && (header.dataType === \"number\" ||\n                        header.dataType === \"string\") &&\n                        header.accessor !== this.keyField) {\n                        if (edit && edit.row === rowIdx && edit.cell === index) {\n                            content = (\n                                <form onSubmit={this.onUpdate}>\n                                    <input type=\"text\" defaultValue={content}\n                                        onKeyUp={this.onFormReset} />\n                                </form>\n                            );\n                        }\n\n                    }\n                }\n\n                return (\n                    <td key={index} data-id={id} data-row={rowIdx}>\n                        {content}\n                    </td>\n                );\n            });\n            return (\n                <tr key={rowIdx}>\n                    {tds}\n                </tr>\n            );\n        });\n        return contentView;\n    }\n\n    onSort = (e) => {\n        let data = this.state.data.slice(); // Give new array\n        let colIndex = ReactDOM.findDOMNode(e.target).parentNode.cellIndex;\n        let colTitle = e.target.dataset.col;\n\n        let descending = !this.state.descending;\n\n        data.sort((a, b) => {\n            let sortVal = 0;\n            if (a[colTitle] < b[colTitle]) {\n                sortVal = -1;\n            } else if (a[colTitle] > b[colTitle]) {\n                sortVal = 1;\n            }\n            if (descending) {\n                sortVal = sortVal * -1;\n            }\n            return sortVal;\n        });\n\n        this.setState({\n            data,\n            sortby: colIndex,\n            descending\n        }, () => {\n            this.onGotoPage(this.state.currentPage);\n        });\n    }\n\n    onSearch = (e) => {\n        let { headers } = this.state;\n        // Grab the index of the target column\n        let idx = e.target.dataset.idx;\n\n        // Get the target column\n        let targetCol = this.state.headers[idx].accessor;\n\n        let data = this._preSearchData;\n\n        // Filter the records\n        let searchData = this._preSearchData.filter((row) => {\n            let show = true;\n\n            for (let i = 0; i < headers.length; i++) {\n                let fieldName = headers[i].accessor;\n                let fieldValue = row[fieldName];\n                let inputId = 'inp' + fieldName;\n                let input = this[inputId];\n                if (!fieldValue === '') {\n                    show = true;\n                } else {\n                    show = fieldValue.toString().toLowerCase().indexOf(input.value.toLowerCase()) > -1;\n                    if (!show) break;\n                }\n            }\n            return show;\n            //return row[targetCol].toString().toLowerCase().indexOf(needle) > -1;\n        });\n\n        // UPdate the state\n        this.setState({\n            data: searchData,\n            pagedData: searchData,\n            totalRecords: searchData.length\n        }, () => {\n            if (this.pagination.enabled) {\n                this.onGotoPage(1);\n            }\n        });\n    }\n\n    renderSearch = () => {\n        let { search, headers } = this.state;\n        if (!search) {\n            return null;\n        }\n\n        let searchInputs = headers.map((header, idx) => {\n\n            // Get the header ref.\n            let hdr = this[header.accessor];\n            let inputId = 'inp' + header.accessor;\n\n            return (\n                <td key={idx}>\n                    <input type=\"text\"\n                        ref={(input) => this[inputId] = input}\n                        style={{\n                            width: hdr.clientWidth - 17 + \"px\"\n                        }}\n                        data-idx={idx}\n                    />\n                </td>\n            );\n\n        });\n\n        return (\n            <tr onChange={this.onSearch}>\n                {searchInputs}\n            </tr>\n        );\n    }\n\n    onShowEditor = (e) => {\n        let id = e.target.dataset.id;\n        this.setState({\n            edit: {\n                row: parseInt(e.target.dataset.row, 10),\n                rowId: id,\n                cell: e.target.cellIndex\n            }\n        })\n    }\n\n    renderTable = () => {\n        let title = this.props.title || \"DataTable\";\n        let headerView = this.renderTableHeader();\n        let contentView = this.state.data.length > 0\n            ? this.renderContent()\n            : this.renderNoData();\n\n        return (\n            <table className=\"data-inner-table\">\n                <caption className=\"data-table-caption\">\n                    {title}\n                </caption>\n                <thead onClick={this.onSort}>\n                    <tr>\n                        {headerView}\n                    </tr>\n                </thead>\n                <tbody onDoubleClick={this.onShowEditor}>\n                    {this.renderSearch()}\n                    {contentView}\n                </tbody>\n            </table>\n        );\n    }\n\n    onToggleSearch = (e) => {\n        if (this.state.search) {\n            this.setState({\n                data: this._preSearchData,\n                search: false\n            });\n            this._preSearchData = null;\n        } else {\n            this._preSearchData = this.state.data;\n            this.setState({\n                search: true\n            });\n        }\n    }\n\n    renderToolbar = () => {\n        return (\n            <div className=\"toolbar\">\n                <button onClick={this.onToggleSearch}>\n                    Search\n                </button>\n            </div>\n\n        );\n    }\n\n    getPagedData = (pageNo, pageLength) => {\n        let startOfRecord = (pageNo - 1) * pageLength;\n        let endOfRecord = startOfRecord + pageLength;\n\n        let data = this.state.data;\n        let pagedData = data.slice(startOfRecord, endOfRecord);\n\n        return pagedData;\n    }\n\n    onPageLengthChange = (pageLength) => {\n        this.setState({\n            pageLength: parseInt(pageLength, 10)\n        }, () => {\n            this.onGotoPage(this.state.currentPage);\n        });\n    }\n\n    onGotoPage = (pageNo) => {\n        let pagedData = this.getPagedData(pageNo, this.state.pageLength);\n        this.setState({\n            pagedData: pagedData,\n            currentPage: pageNo\n        });\n    }\n\n    componentDidMount() {\n        if (this.pagination.enabled) {\n            this.onGotoPage(this.state.currentPage);\n        }\n    }\n\n    //todo:\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.data.length != prevState.data.length) {\n            return {\n                headers: nextProps.headers,\n                data: nextProps.data,\n                sortby: prevState.sortby,\n                descending: prevState.descending,\n                search: prevState.search,\n                currentPage: 1,\n                pagedData: nextProps.data,\n            }\n        }\n        return null;\n    }\n\n    render() {\n        return (\n            <div className={this.props.className}>\n                {this.pagination.enabled &&\n\n                    <Pagination\n                        type={this.props.pagination.type}\n                        totalRecords={this.state.data.length}\n                        pageLength={this.state.pageLength}\n                        onPageLengthChange={this.onPageLengthChange}\n                        onGotoPage={this.onGotoPage}\n                        currentPage={this.state.currentPage}\n                    />\n                }\n                {this.renderToolbar()}\n                {this.renderTable()}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}